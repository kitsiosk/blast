#!/bin/bash
set -euo pipefail

if [ $# -lt 1 ] || [ $# -gt 2 ]; then
    echo "Usage: $0 <label> [DEBUG]"
    exit 1
fi

LABEL=$1
DEBUG=${2:-0} # Debug mode to run only a subset of instances for local testing. By default is 0 (off).
LOGDIR="logs_blast"
mkdir -p "${LOGDIR}"
LOGFILE="${LOGDIR}/blast_${LABEL}.log"

echo "Starting BLAST (label: ${LABEL}, DEBUG=${DEBUG})" | tee "${LOGFILE}"

# Step 1: Run SBST component.
# Use "--debug True" for local testing with fewer instances. See run_sbst_component.py for full list of options.
# The output logs will be in logs_pynguin/<label>/
# Important: as described in the paper, each F2P test generated by Pynguin needs to be manually validated.
echo "==== Step 1: Running and Evaluating SBST component ====" | tee -a "${LOGFILE}"
python run_sbst_component.py \
  --mode sbst_with_llm_seed \
  --rm_instance_image Yes \
  --label "${LABEL}" \
  --debug "${DEBUG}" 2>&1 | tee -a "${LOGFILE}"

# Step 2: Run LLM component.
# By default, the best combination of inputs is used, i.e., C6 from the paper. You can change them above the `build_prompt` function in run_llm_component.py
# The SBST seeds (if any) will be taken from logs_pynguin/<label>/
# The LLM-generated tests will be saved in preds_<label>.jsonl
echo "==== Step 2: Running LLM component ====" | tee -a "${LOGFILE}"
python run_llm_component.py \
  --label "${LABEL}" \
  --debug "${DEBUG}" 2>&1 | tee -a "${LOGFILE}"

# Step 3: Evaluate LLM component with TDDBench
echo "==== Step 3: Evaluating LLM Component Using the TDDBench harness ====" | tee -a "${LOGFILE}"
python -m tddbench.harness.run_evaluation \
  --dataset_name TDD_Bench.json \
  --cache_level env \
  --max_workers 12 \
  --clean True \
  --predictions_path "preds_${LABEL}.jsonl" \
  --run_id "${LABEL}" 2>&1 | tee -a "${LOGFILE}"

# Step 4: Aggregate results
echo "==== Step 4: Aggregating SBST and LLM results ====" | tee -a "${LOGFILE}"
python aggregate_results.py --label "${LABEL}" 2>&1 | tee -a "${LOGFILE}"

echo "==== Pipeline completed successfully for label ${LABEL} ====" | tee -a "${LOGFILE}"